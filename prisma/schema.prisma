// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
  CUSTOMER
}

enum NotificationType {
  VOCAB
  VOCAB_TRAINER
  VOCAB_SUBJECT
  SYSTEM
}

enum NotificationAction {
  CREATE
  UPDATE
  DELETE
  MULTI_CREATE
  MULTI_DELETE
  REMIND
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
}

enum TrainerStatus {
  PENDING
  IN_PROCESS
  COMPLETED
  CANCELLED
  FAILED
  PASSED
}

enum QuestionType {
  MULTIPLE_CHOICE
  FILL_IN_THE_BLANK
  MATCHING
  TRUE_OR_FALSE
  SHORT_ANSWER
}

model Language {
  id        String   @id @default(cuid()) @map("id")
  code      String   @unique @map("code")
  name      String   @map("name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sourceVocabs Vocab[] @relation("VocabSourceLanguage")
  targetVocabs Vocab[] @relation("VocabTargetLanguage")

  sourceLanguageFolders LanguageFolder[] @relation("SourceLanguageFolders")
  targetLanguageFolders LanguageFolder[] @relation("TargetLanguageFolders")

  @@index([name])
  @@index([code])
  @@map("language")
}

model LanguageFolder {
  id          String   @id @default(cuid()) @map("id")
  name        String   @map("name")
  folderColor String   @map("folder_color")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  vocabs Vocab[]

  sourceLanguageCode String   @map("source_language_code")
  sourceLanguage     Language @relation("SourceLanguageFolders", fields: [sourceLanguageCode], references: [code], onDelete: Cascade)

  targetLanguageCode String   @map("target_language_code")
  targetLanguage     Language @relation("TargetLanguageFolders", fields: [targetLanguageCode], references: [code], onDelete: Cascade)

  @@index([name])
  @@map("language_folder")
}

model Vocab {
  id                 String         @id @default(cuid()) @map("id")
  textSource         String         @map("text_source")
  sourceLanguageCode String         @map("source_language_code")
  sourceLanguage     Language       @relation("VocabSourceLanguage", fields: [sourceLanguageCode], references: [code], onDelete: Cascade)
  targetLanguageCode String         @map("target_language_code")
  targetLanguage     Language       @relation("VocabTargetLanguage", fields: [targetLanguageCode], references: [code], onDelete: Cascade)
  userId             String         @map("user_id")
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  languageFolderId   String         @map("language_folder_id")
  LanguageFolder     LanguageFolder @relation(fields: [languageFolderId], references: [id], onDelete: Cascade)
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")

  vocabTrainerWords VocabTrainerWord[]
  textTargets       TextTarget[]

  @@unique([textSource, sourceLanguageCode, targetLanguageCode])
  @@index([textSource])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([sourceLanguageCode])
  @@index([targetLanguageCode])
  @@index([sourceLanguageCode, targetLanguageCode])
  @@index([languageFolderId, sourceLanguageCode, targetLanguageCode])
  @@map("vocab")
}

model VocabTrainer {
  id                 String        @id @default(cuid()) @map("id")
  name               String        @map("name")
  status             TrainerStatus @map("status")
  countTime          Int           @default(0) @map("count_time")
  setCountTime       Int           @default(0) @map("set_count_time")
  reminderTime       Int           @default(0) @map("reminder_time")
  reminderDisabled   Boolean       @default(false) @map("reminder_disabled")
  reminderRepeat     Int           @default(2) @map("reminder_repeat")
  reminderLastRemind DateTime      @default(now()) @map("reminder_last_remind")
  questionType       QuestionType  @default(MULTIPLE_CHOICE) @map("question_type")
  questionAnswers    Json[]        @default([]) @map("question_answers")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  vocabAssignments VocabTrainerWord[]
  results          VocabTrainerResult[]

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([status, createdAt])
  @@index([reminderDisabled, reminderLastRemind])
  @@index([createdAt])
  @@index([name])
  @@map("vocab_trainer")
}

model VocabTrainerWord {
  id             String       @id @default(cuid()) @map("id")
  vocabTrainerId String       @map("vocab_trainer_id")
  vocabTrainer   VocabTrainer @relation(fields: [vocabTrainerId], references: [id], onDelete: Cascade)
  vocabId        String       @map("vocab_id")
  vocab          Vocab        @relation(fields: [vocabId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@unique([vocabTrainerId, vocabId])
  @@index([vocabTrainerId])
  @@index([vocabId])
  @@index([vocabTrainerId, createdAt])
  @@index([createdAt])
  @@map("vocab_trainer_word")
}

model VocabTrainerResult {
  id             String        @id @default(cuid()) @map("id")
  vocabTrainerId String        @map("vocab_trainer_id")
  vocabTrainer   VocabTrainer  @relation(fields: [vocabTrainerId], references: [id], onDelete: Cascade)
  status         TrainerStatus @map("status")
  userSelected   String        @map("user_selected")
  systemSelected String        @map("system_selected")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  @@index([vocabTrainerId])
  @@index([vocabTrainerId, status])
  @@index([vocabTrainerId, createdAt])
  @@index([status])
  @@index([createdAt])
  @@map("vocab_trainer_result")
}

model TextTarget {
  id                 String              @id @default(cuid()) @map("id")
  vocabId            String              @map("vocab_id")
  vocab              Vocab               @relation(fields: [vocabId], references: [id], onDelete: Cascade)
  wordTypeId         String?             @map("word_type_id")
  wordType           WordType?           @relation(fields: [wordTypeId], references: [id], onDelete: SetNull)
  textTarget         String              @map("text_target")
  grammar            String              @map("grammar")
  explanationSource  String              @map("explanation_source")
  explanationTarget  String              @map("explanation_target")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  vocabExamples      VocabExample[]
  textTargetSubjects TextTargetSubject[]

  @@unique([vocabId, textTarget])
  @@index([vocabId])
  @@index([wordTypeId])
  @@index([textTarget])
  @@index([createdAt])
  @@map("text_target")
}

model VocabExample {
  id           String     @id @default(cuid()) @map("id")
  textTargetId String     @map("text_target_id")
  textTarget   TextTarget @relation(fields: [textTargetId], references: [id], onDelete: Cascade)
  source       String     @map("source")
  target       String     @map("target")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@index([textTargetId])
  @@index([textTargetId, createdAt])
  @@index([source])
  @@index([target])
  @@map("vocab_example")
}

model WordType {
  id          String       @id @default(cuid()) @map("id")
  name        String       @unique @map("name")
  description String       @map("description")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  textTargets TextTarget[]

  @@index([name])
  @@map("word_type")
}

model Subject {
  id                 String              @id @default(cuid()) @map("id")
  name               String              @unique @map("name")
  order              Int                 @map("order")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  textTargetSubjects TextTargetSubject[]
  userId             String              @map("user_id")
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([order])
  @@index([name])
  @@map("subject")
}

model TextTargetSubject {
  id           String     @id @default(cuid()) @map("id")
  textTargetId String     @map("text_target_id")
  textTarget   TextTarget @relation(fields: [textTargetId], references: [id], onDelete: Cascade)
  subjectId    String     @map("subject_id")
  subject      Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@unique([textTargetId, subjectId])
  @@index([textTargetId])
  @@index([subjectId])
  @@index([subjectId, textTargetId])
  @@map("text_target_subject")
}

model Notification {
  id                     String                  @id @default(cuid()) @map("id")
  type                   NotificationType        @map("type")
  action                 NotificationAction      @map("action")
  priority               PriorityLevel           @map("priority")
  data                   Json                    @map("data")
  isActive               Boolean                 @default(true) @map("is_active")
  expiresAt              DateTime                @map("expires_at")
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  notificationRecipients NotificationRecipient[]

  @@index([type, isActive])
  @@index([priority, isActive])
  @@index([isActive, expiresAt])
  @@index([isActive, createdAt])
  @@index([createdAt])
  @@map("notification")
}

model NotificationRecipient {
  id             String       @id @default(cuid()) @map("id")
  notificationId String       @map("notification_id")
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  userId         String       @map("user_id")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  isRead         Boolean      @default(false) @map("is_read")
  isDeleted      Boolean      @default(false) @map("is_deleted")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@unique([notificationId, userId])
  @@index([userId, isRead, isDeleted])
  @@index([userId, isDeleted, createdAt])
  @@index([notificationId, isRead])
  @@index([userId])
  @@index([notificationId])
  @@index([isRead])
  @@index([isDeleted])
  @@map("notification_recipient")
}

model User {
  id                     String                  @id @default(cuid()) @map("id")
  email                  String                  @unique @map("email")
  firstName              String                  @map("first_name")
  lastName               String                  @map("last_name")
  phone                  String?                 @map("phone")
  avatar                 String?                 @map("avatar")
  role                   UserRole                @default(CUSTOMER) @map("role")
  isActive               Boolean                 @default(true) @map("is_active")
  supabaseUserId         String?                 @unique @map("supabase_user_id")
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  notificationRecipients NotificationRecipient[]
  vocabs                 Vocab[]
  vocabTrainers          VocabTrainer[]
  subjects               Subject[]
  UserFcmToken           UserFcmToken[]
  LanguageFolder         LanguageFolder[]

  @@index([role, isActive])
  @@index([isActive, createdAt])
  @@index([email, isActive])
  @@index([firstName, lastName])
  @@index([phone])
  @@map("user")
}

model UserFcmToken {
  userId     String    @map("user_id")
  fcmToken   String    @map("fcm_token")
  deviceType String?   @map("device_type")
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  createdBy  String?   @map("created_by")
  updatedBy  String?   @map("updated_by")
  deletedBy  String?   @map("deleted_by")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, fcmToken])
  @@index([fcmToken])
  @@map("user_fcm_token")
}
